import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

export type dataState = {
  albumId: number;
  id: number;
  title: string;
  url: string;
  thumbnailUrl: string;
};

export interface galleryState {
  data: dataState[];
  filteredData: dataState[];
  status: string;
  imageIndex: number;
}

const initialState: galleryState = {
  data: [],
  filteredData: [],
  status: "",
  imageIndex: 0,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchData = createAsyncThunk("gallery/fetch", async (thunkAPI) => {
  const response = await fetch("https://jsonplaceholder.typicode.com/photos");
  const data = response.json();
  return data;
});

export const gallerySlice = createSlice({
  name: "gallery",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    filter(state, { payload }) {
      state.filteredData = state.data.filter((el) =>
        el.title.includes(payload)
      );
      state.imageIndex = 0;
    },
    reset(state) {
      state.filteredData = [];
      state.imageIndex = 0;
    },
    nextImage(state) {
      if (state.imageIndex < state.filteredData.length - 1) {
        state.imageIndex += 1;
      }
    },
    prevImage(state) {
      if (state.imageIndex > 0) {
        state.imageIndex -= 1;
      }
    },
    setImage(state, { payload }) {
      state.imageIndex = payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchData.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchData.fulfilled, (state, action) => {
        state.status = "idle";
        state.data = action.payload;
      })
      .addCase(fetchData.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { filter, reset, prevImage, nextImage, setImage } =
  gallerySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.data;

export default gallerySlice.reducer;
